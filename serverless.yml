service: omni-wt-cw-integration

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  runtime: nodejs20.x
  vpc:
    securityGroupIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    subnetIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
        - ec2:AssignPrivateIpAddresses
        - ec2:UnassignPrivateIpAddresses
        - s3:GetObject
        - s3:PutObject
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - sns:*
        - ses:*
        - sqs:SendMessage
      Resource: '*'
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    ERROR_SNS_ARN: ${ssm:/omni-wt-cw-integration/${self:provider.stage}/error-notifications/sns.arn}
    LENOVO_CUST_ID: ${ssm:/omni-wt-cw-integration/${self:provider.stage}/lenovo/customerid}

  deploymentBucket:
    name: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
    serverSideEncryption: AES256

package:
  individually: true

functions:
  create-shipment: ${file(config/functions/create-shipment-lenovo.yml):function}
  create-shipment-retrigger-process: ${file(config/functions/create-shipment-retrigger-process.yml):function}
  create-shipment-s3-to-queue: ${file(config/functions/create-shipment-s3-to-queue.yml):function}
  add-milestone: ${file(config/functions/add-milestone.yml):function}
  shipment-file-stream-processor: ${file(config/functions/pod-docs-stream-processor.yml):function}
  table-status-checker: ${file(config/functions/table-status-checker.yml):function}
  doc-sender: ${file(config/functions/doc-sender.yml):function}
  cost-transmitter: ${file(config/functions/cost-transmitter.yml):function}

layers:
  NodeModules:
    path: lambdaLayer/lib
    name: ${self:service}-layer-${self:provider.stage}
    description: Lambda layer for all node modules - ${self:provider.stage}
    compatibleRuntimes:
      - nodejs20.x
    retain: false

plugins:
  - serverless-plugin-existing-s3
